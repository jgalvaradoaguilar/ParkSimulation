/*
 * ParqueUI.java
 *
 * Created on 11 de agosto de 2008, 0:00
 */

package mi.parque;
import javax.swing.*;
import java.io.*;

/**
 *
 * @author  owner
 */
public class ParqueUI extends javax.swing.JFrame {
    //defino las variables miembro
    private static FileInputStream file;       //para leer
    private static FileOutputStream fichero;     //para escribir
    private static ObjectOutputStream output;
    private static ObjectInputStream input;
    public static MontaniaRusa montania;
    public static Noria noria;
    public static CRA cra;
    public static Torniquete torniquete_montania;
    public static Torniquete torniquete_noria;
    
    
    /** Creates new form ParqueUI */
    public ParqueUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    public void salvar_datos() {
        try{
            fichero = new FileOutputStream("almacenadatos.ser");
            output = new ObjectOutputStream(fichero);
            output.writeObject(montania);
            output.writeObject(noria);
            output.writeObject(cra);
            output.writeObject(torniquete_montania);
            output.writeObject(torniquete_noria); 
            output.flush();
            fichero.close();
        }
        catch(IOException e){
            mi_consola.append("No se ha podido guardar los datos al fichero\n");  
            //e.printStackTrace();
        }
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        gestionar_atracciones = new javax.swing.JButton();
        trafico_usuarios = new javax.swing.JButton();
        gestionar_operarios = new javax.swing.JButton();
        gestionar_averias = new javax.swing.JButton();
        central_control = new javax.swing.JButton();
        por_defecto = new javax.swing.JButton();
        play_noria = new javax.swing.JButton();
        play_montania = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        mi_consola = new javax.swing.JTextArea();
        guarda_datos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Parque de Atracciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        gestionar_atracciones.setText("Gestionar Atracciones");
        gestionar_atracciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gestionar_atraccionesActionPerformed(evt);
            }
        });

        trafico_usuarios.setText("Controlar tráfico de usuarios");
        trafico_usuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trafico_usuariosActionPerformed(evt);
            }
        });

        gestionar_operarios.setText("Gestionar Operarios");
        gestionar_operarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gestionar_operariosActionPerformed(evt);
            }
        });

        gestionar_averias.setText("Gestionar Averías");
        gestionar_averias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gestionar_averiasActionPerformed(evt);
            }
        });

        central_control.setText("Central de Control");
        central_control.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                central_controlActionPerformed(evt);
            }
        });

        por_defecto.setText("Datos por defecto");
        por_defecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                por_defectoActionPerformed(evt);
            }
        });

        play_noria.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        play_noria.setText("PLAY Noria");
        play_noria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                play_noriaActionPerformed(evt);
            }
        });

        play_montania.setFont(new java.awt.Font("Tahoma", 1, 16));
        play_montania.setText("PLAY Montaña");
        play_montania.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                play_montaniaActionPerformed(evt);
            }
        });

        mi_consola.setColumns(20);
        mi_consola.setRows(5);
        jScrollPane1.setViewportView(mi_consola);

        guarda_datos.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        guarda_datos.setText("Guardar datos");
        guarda_datos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guarda_datosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(central_control, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(por_defecto, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(play_noria, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(play_montania, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(gestionar_atracciones, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                                    .addComponent(gestionar_operarios, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(trafico_usuarios, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                                    .addComponent(gestionar_averias, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(guarda_datos, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gestionar_atracciones)
                    .addComponent(trafico_usuarios))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gestionar_operarios, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gestionar_averias))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(central_control)
                    .addComponent(por_defecto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(play_noria, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(play_montania, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guarda_datos, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void gestionar_atraccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gestionar_atraccionesActionPerformed
// TODO add your handling code here:
    GestionAtraccionesUI rec = new GestionAtraccionesUI();
    if(JOptionPane.showConfirmDialog(this, rec, "Introduzca datos",
    JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE)
    == JOptionPane.OK_OPTION) {
    //no hay recogida datos en GestionAtraccionesUI   
    }
}//GEN-LAST:event_gestionar_atraccionesActionPerformed

private void trafico_usuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trafico_usuariosActionPerformed
// TODO add your handling code here:
    ControlDeUsuariosUI rec = new ControlDeUsuariosUI();
    if(JOptionPane.showConfirmDialog(this, rec, "Introduzca datos",
    JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE)
    == JOptionPane.OK_OPTION) {
    //no hay recogida de datos
    }
}//GEN-LAST:event_trafico_usuariosActionPerformed

private void gestionar_operariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gestionar_operariosActionPerformed
// TODO add your handling code here:
    OperariosUI rec = new OperariosUI();
    if(JOptionPane.showConfirmDialog(this, rec, "Introduzca datos",
    JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE)
    == JOptionPane.OK_OPTION) {
    //no hay recogida de datos
    }   
}//GEN-LAST:event_gestionar_operariosActionPerformed

private void gestionar_averiasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gestionar_averiasActionPerformed
// TODO add your handling code here:
    AveriasUI rec = new AveriasUI();
    if(JOptionPane.showConfirmDialog(this, rec, "Introduzca datos",
    JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE)
    == JOptionPane.OK_OPTION) {
    //no hay recogida de datos
    }      
}//GEN-LAST:event_gestionar_averiasActionPerformed

private void central_controlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_central_controlActionPerformed
// TODO add your handling code here:
    CentralDeControlUI rec = new CentralDeControlUI();
    if(JOptionPane.showConfirmDialog(this, rec, "Introduzca datos",
    JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE)
    == JOptionPane.OK_OPTION) {
    //no hay recogida de datos
    }  
}//GEN-LAST:event_central_controlActionPerformed

private void por_defectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_por_defectoActionPerformed
// TODO add your handling code here:
    montania = new MontaniaRusa();
    noria = new Noria();
    cra = new CRA();
    torniquete_montania = new Torniquete();
    torniquete_noria = new Torniquete();
    mi_consola.append("Se han establecido los datos por defecto \n");
    salvar_datos();
}//GEN-LAST:event_por_defectoActionPerformed

private void play_noriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_play_noriaActionPerformed
// TODO add your handling code here:
    /*cada vez que se le da al PLAY se controla la atraccion:
    - Ya ha pasado un turno (tiempo)-->LED del torniquete esta en ambar o en verde(
      ambar si hay averia, verde si no hay)*/
     
    boolean verificacion_1 = false;     //mira si esta en verde
    boolean verificacion_2 = false;     //mira si no hay nadie dentro
    if (noria.tieneAveria()){
        torniquete_noria.semaforo = "ambar";
    }
    else{
        torniquete_noria.semaforo = "verde";
    }
    if (torniquete_noria.ver_semaforo().equals("verde")){
         verificacion_1=true;    
    }
    mi_consola.append("El semáforo de la noria está en " + torniquete_noria.ver_semaforo() + "\n");
    
    if (torniquete_noria.personas_dentro == 0){
        noria.contador_tiempo=0;     //si no hay nadie, se vuelve a 0 el tiempo
        verificacion_2=true;
    }
    else{
        //hay personas dentro de la noria, aumenta el contador de tiempo
        //al llegar a 2 se entra a buscar a las personas atrapadas.
        noria.contador_tiempo++;
    }
    if (noria.contador_tiempo ==1 ){
        //no ha pasado suficiente tiempo para decir con certeza que hay alguien atrapado
        mi_consola.append("La noria no se ha podido accionar, aún está saliendo gente\n");
    }
    if (noria.contador_tiempo == 2){
        //se entra a buscar a las personas atrapadas
        mi_consola.append("La noria no se ha podido accionar\n");
        mi_consola.append("Se ha rescatado a todas las personas que estaban dentro\n");
        noria.contador_tiempo=0;    //vuelve el tiempo a 0
        torniquete_noria.personas_dentro=0; //se rescata a todos
    }
    
    if (verificacion_1 && verificacion_2){  //no hay averias y no hay nadie atrapado   
        // Revisar cuantos vehículos tengo
        int numero_vehiculos = noria.vehiculos.size();
        // Hay 2 personas por vehiculo
        int numero_personas = numero_vehiculos*2;
        // Miro la cola, verifico cuantos entran y guardo nuevo dato en la cola
        int personas_en_cola = noria.cola;
        
        if (personas_en_cola >= numero_personas){
            torniquete_noria.personas_dentro = numero_personas;
        }
        else{
            torniquete_noria.personas_dentro = personas_en_cola;
        }
        // Defino la nueva cola de la noria
        noria.cola = noria.cola - torniquete_noria.personas_dentro();
        mi_consola.append("Se ha accionado la noria\n");
    }
    
    //se hara la copia de seguridad de los datos
    salvar_datos();
}//GEN-LAST:event_play_noriaActionPerformed

private void play_montaniaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_play_montaniaActionPerformed
// TODO add your handling code here:
    /*cada vez que se le da al PLAY se controla la atraccion:
    - Ya ha pasado un turno (tiempo)-->LED del torniquete esta en ambar o en verde(
      ambar si hay averia, verde si no hay)*/
     
    boolean verificacion_1 = false;     //mira si esta en verde
    boolean verificacion_2 = false;     //mira si no hay nadie dentro
    if (montania.tieneAveria()){
        torniquete_montania.semaforo = "ambar";
    }
    else{
        torniquete_montania.semaforo = "verde";
    }
    if (torniquete_montania.ver_semaforo().equals("verde")){
         verificacion_1=true;    
    }
    mi_consola.append("El semáforo de la montaña está en " + torniquete_montania.ver_semaforo()+"\n");
    
    if (torniquete_montania.personas_dentro == 0){
        montania.contador_tiempo=0;     //si no hay nadie, se vuelve a 0 el tiempo
        verificacion_2=true;
    }
    else{
        //hay personas dentro de la montaña, aumenta el contador de tiempo
        //al llegar a 2 se entra a buscar a las personas atrapadas.
        montania.contador_tiempo++;
    }
    if (montania.contador_tiempo ==1 ){
        //no ha pasado suficiente tiempo para decir con certeza que hay alguien atrapado
        mi_consola.append("La montaña no se ha podido accionar, aún está saliendo gente\n");
    }
    if (montania.contador_tiempo == 2){
        //se entra a buscar a las personas atrapadas
        mi_consola.append("La montaña no se ha podido accionar\n");
        mi_consola.append("Se ha rescatado a todas las personas que estaban dentro\n");
        montania.contador_tiempo=0;    //vuelve el tiempo a 0
        torniquete_montania.personas_dentro=0; //se rescata a todos
    }
    
    if (verificacion_1 && verificacion_2){  //no hay averias y no hay nadie atrapado   
        // Revisar cuantos coches tengo
        int numero_coches = montania.coches.size();
        // Hay 2 personas por coche
        int numero_personas = numero_coches*2;
        // Miro la cola, verifico cuantos entran y guardo nuevo dato en la cola
        int personas_en_cola = montania.cola;
        
        if (personas_en_cola >= numero_personas){
            torniquete_montania.personas_dentro = numero_personas;
        }
        else{
            torniquete_montania.personas_dentro = personas_en_cola;
        }
        // Defino la nueva cola de la montaña
        montania.cola = montania.cola - torniquete_montania.personas_dentro();
        mi_consola.append("Se ha accionado la montaña\n");
    }
    
    //se hara la copia de seguridad de los datos
    salvar_datos();   
}//GEN-LAST:event_play_montaniaActionPerformed

private void guarda_datosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guarda_datosActionPerformed
// TODO add your handling code here:
    //se hara la copia de seguridad de los datos
    salvar_datos();
    mi_consola.append("Se han guardado los datos\n");
}//GEN-LAST:event_guarda_datosActionPerformed
     
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) throws IOException,ClassNotFoundException{
        try{
        file = new FileInputStream("almacenadatos.ser");
        input = new ObjectInputStream(file);}
        catch(IOException e2){
            //e2.printStackTrace();
        }
        if (file == null){      //no existe el fichero -->datos por defecto
            montania = new MontaniaRusa();
            noria = new Noria();
            cra = new CRA();
            torniquete_montania = new Torniquete();
            torniquete_noria = new Torniquete(); 
        }
        else{                   //existe el fichero --> leo los datos
            montania=(MontaniaRusa)input.readObject();
            noria = (Noria)input.readObject();
            cra = (CRA)input.readObject();
            torniquete_montania = (Torniquete)input.readObject();
            torniquete_noria = (Torniquete)input.readObject();
            file.close();
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ParqueUI().setVisible(true);
                if (file == null){ 
                     mi_consola.append("No existe el fichero\n");
                }
                else{
                    mi_consola.append("Existe el fichero\n");
                }    
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton central_control;
    private javax.swing.JButton gestionar_atracciones;
    private javax.swing.JButton gestionar_averias;
    private javax.swing.JButton gestionar_operarios;
    private javax.swing.JButton guarda_datos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea mi_consola;
    private javax.swing.JButton play_montania;
    private javax.swing.JButton play_noria;
    private javax.swing.JButton por_defecto;
    private javax.swing.JButton trafico_usuarios;
    // End of variables declaration//GEN-END:variables

}